import React, { useState, useEffect } from 'react';
import * as api from '../lib/api';
import { AppEvent, emit } from '../lib/events';
import { config } from '../config'; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç config

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏
interface EnergyPackage {
  id: number;
  name: string;
  energy_amount: number;
  price: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª—é—Ç—ã –ª–æ–∫–∞—Ü–∏–∏
interface LocationCurrency {
  id: string;
  name: string;
  icon: string;
  exchangeRate: number; // –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∞–ª—é—Ç—É
}

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏
const ENERGY_PACKAGES: EnergyPackage[] = [
  { id: 1, name: '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç', energy_amount: 10, price: 50 },
  { id: 2, name: '–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç', energy_amount: 25, price: 100 },
  { id: 3, name: '–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç', energy_amount: 50, price: 180 }
];

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ª–æ–∫–∞—Ü–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞)
const LOCATION_CURRENCIES: LocationCurrency[] = [
  { id: 'forest', name: '–î—Ä–µ–≤–µ—Å–∏–Ω–∞', icon: 'üå≥', exchangeRate: 0.5 },
  { id: 'mountain', name: '–ö–∞–º–µ–Ω—å', icon: '‚õ∞Ô∏è', exchangeRate: 0.7 },
  { id: 'desert', name: '–ü–µ—Å–æ–∫', icon: 'üèúÔ∏è', exchangeRate: 0.3 },
  { id: 'farm', name: '–ó–µ—Ä–Ω–æ', icon: 'üåæ', exchangeRate: 0.4 }
];

const ExchangeScreen: React.FC = () => {
  const [coins, setCoins] = useState<number>(0);
  const [energy, setEnergy] = useState<number>(0);
  const [maxEnergy, setMaxEnergy] = useState<number>(100);
  const [buying, setBuying] = useState<boolean>(false);
  const [message, setMessage] = useState<{text: string, type: 'success' | 'error'} | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
  const [selectedCurrency, setSelectedCurrency] = useState<LocationCurrency | null>(null);
  const [exchangeAmount, setExchangeAmount] = useState<string>('');
  const [currencyBalances, setCurrencyBalances] = useState<Record<string, number>>({});
  const [exchanging, setExchanging] = useState<boolean>(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadPlayerData();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  const loadPlayerData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
      const userCoins = await api.getResourceAmount('main');
      console.log('–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:', userCoins);
      setCoins(userCoins);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
      const progress = await api.getPlayerProgress();
      console.log('–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞:', progress);
      setEnergy(progress.energy);
      setMaxEnergy(progress.maxEnergy);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤–∞–ª—é—Ç –ª–æ–∫–∞—Ü–∏–π
      const balances: Record<string, number> = {};
      for (const currency of LOCATION_CURRENCIES) {
        try {
          const amount = await api.getResourceAmount(currency.id);
          balances[currency.id] = amount;
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞ –≤–∞–ª—é—Ç—ã ${currency.id}:`, error);
          balances[currency.id] = 0;
        }
      }
      setCurrencyBalances(balances);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (LOCATION_CURRENCIES.length > 0 && !selectedCurrency) {
        setSelectedCurrency(LOCATION_CURRENCIES[0]);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
  const buyEnergy = async (pack: EnergyPackage) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if (coins < pack.price) {
      showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏', 'error');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —ç–Ω–µ—Ä–≥–∏—è –º–∞–∫—Å–∏–º—É–º
    if (energy >= maxEnergy) {
      showMessage('–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏', 'error');
      return;
    }
    
    setBuying(true);
    try {
      console.log(`–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏: ${pack.name}, —Ü–µ–Ω–∞: ${pack.price}, —ç–Ω–µ—Ä–≥–∏—è: +${pack.energy_amount}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
      const response = await fetch(`${config.apiUrl}/api/player/buy-energy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': api.getUserId() // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
        body: JSON.stringify({
          energyAmount: pack.energy_amount,
          price: pack.price
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é');
      }
      
      const data = await response.json();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      setCoins(data.coins);
      setEnergy(data.energy);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è App.tsx
      emit(AppEvent.RESOURCES_UPDATED, {
        currencyId: 'main',
        amount: data.coins
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è App.tsx
      emit(AppEvent.ENERGY_UPDATED, {
        energy: data.energy,
        maxEnergy: data.maxEnergy
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showMessage(`+${pack.energy_amount} —ç–Ω–µ—Ä–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!`, 'success');
      console.log(`–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: –º–æ–Ω–µ—Ç—ã=${data.coins}, —ç–Ω–µ—Ä–≥–∏—è=${data.energy}/${data.maxEnergy}`);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç–Ω–µ—Ä–≥–∏–∏:', error);
      showMessage(`–û—à–∏–±–∫–∞: ${error.message || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}`, 'error');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      await loadPlayerData();
    } finally {
      setBuying(false);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤–∞–ª—é—Ç—É
  const exchangeCurrency = async () => {
    if (!selectedCurrency) {
      showMessage('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞', 'error');
      return;
    }
    
    const amount = parseInt(exchangeAmount);
    if (isNaN(amount) || amount <= 0) {
      showMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞', 'error');
      return;
    }
    
    const currencyBalance = currencyBalances[selectedCurrency.id] || 0;
    if (currencyBalance < amount) {
      showMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${selectedCurrency.name} –¥–ª—è –æ–±–º–µ–Ω–∞`, 'error');
      return;
    }
    
    setExchanging(true);
    try {
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–∏—Ç –∏–≥—Ä–æ–∫
      const mainCoinsToReceive = Math.floor(amount * selectedCurrency.exchangeRate);
      
      console.log(`–ù–∞—á–∞–ª–æ –æ–±–º–µ–Ω–∞: ${amount} ${selectedCurrency.name} –Ω–∞ ${mainCoinsToReceive} –º–æ–Ω–µ—Ç`);
      
      // 1. –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã –ª–æ–∫–∞—Ü–∏–∏
      const spendResponse = await fetch(`${config.apiUrl}/api/player/resources/spend`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': api.getUserId()
        },
        body: JSON.stringify({
          currencyId: selectedCurrency.id,
          amount: amount
        })
      });
      
      if (!spendResponse.ok) {
        const errorData = await spendResponse.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã');
      }
      
      const spendData = await spendResponse.json();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ç—Ä–∞—Ç–∞ —Ä–µ—Å—É—Ä—Å–æ–≤):', spendData);
      
      // 2. –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
      const addResponse = await fetch(`${config.apiUrl}/api/player/resources/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': api.getUserId()
        },
        body: JSON.stringify({
          currencyId: 'main',
          amount: mainCoinsToReceive
        })
      });
      
      if (!addResponse.ok) {
        const errorData = await addResponse.json();
        throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—ã');
      }
      
      const addData = await addResponse.json();
      console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç):', addData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
      setCurrencyBalances(prev => ({
        ...prev,
        [selectedCurrency.id]: spendData.amount
      }));
      setCoins(addData.amount);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
      emit(AppEvent.RESOURCES_UPDATED, {
        currencyId: 'main',
        amount: addData.amount
      });
      
      emit(AppEvent.RESOURCES_UPDATED, {
        currencyId: selectedCurrency.id,
        amount: spendData.amount
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
      setExchangeAmount('');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showMessage(`–û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: +${mainCoinsToReceive} –º–æ–Ω–µ—Ç`, 'success');
      console.log(`–û–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω: ${amount} ${selectedCurrency.name} –Ω–∞ ${mainCoinsToReceive} –º–æ–Ω–µ—Ç`);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –≤–∞–ª—é—Ç—ã:', error);
      showMessage(`–û—à–∏–±–∫–∞: ${error.message || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}`, 'error');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      await loadPlayerData();
    } finally {
      setExchanging(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const showMessage = (text: string, type: 'success' | 'error') => {
    setMessage({ text, type });
    setTimeout(() => setMessage(null), 3000);
  };
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–∏—Ç –∏–≥—Ä–æ–∫ –ø—Ä–∏ –æ–±–º–µ–Ω–µ
  const calculateExchangeResult = () => {
    if (!selectedCurrency || !exchangeAmount || isNaN(parseInt(exchangeAmount))) {
      return 0;
    }
    return Math.floor(parseInt(exchangeAmount) * selectedCurrency.exchangeRate);
  };

  return (
    <div className="w-full max-w-md mx-auto flex flex-col items-center pb-16">
      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className={`p-2 rounded-lg mb-2 text-center fixed top-28 left-1/2 transform -translate-x-1/2 z-20 ${
          message.type === 'success' 
            ? 'bg-green-100 text-green-800 border border-green-300' 
            : 'bg-red-100 text-red-800 border border-red-300'
        }`}>
          {message.text}
        </div>
      )}
      
      {/* –ë–ª–æ–∫ –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ */}
      <div className="bg-gray-900 bg-opacity-80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden border border-gray-700 w-full mb-4">
        <div className="bg-gray-800 bg-opacity-90 p-2 border-b border-yellow-500">
          <h2 className="text-lg font-bold text-yellow-400 text-center">–ü–æ–ø–æ–ª–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é</h2>
        </div>
        
        <div className="p-3">
          {/* –°—Ç–∞—Ç—É—Å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–æ–Ω–µ—Ç */}
          <div className="flex justify-between mb-3">
            <div className="flex items-center bg-gray-800 p-1.5 rounded-md border border-gray-700">
              <div className="w-6 h-6 flex items-center justify-center bg-yellow-500 text-white rounded-full mr-1">
                ‚ö°
              </div>
              <div>
                <div className="text-xs text-gray-400">–≠–Ω–µ—Ä–≥–∏—è</div>
                <div className="font-bold text-white">{energy} / {maxEnergy}</div>
              </div>
            </div>
            
            <div className="flex items-center bg-gray-800 p-1.5 rounded-md border border-gray-700">
              <div className="w-6 h-6 flex items-center justify-center bg-yellow-500 text-white rounded-full mr-1">
                ü™ô
              </div>
              <div>
                <div className="text-xs text-gray-400">–ú–æ–Ω–µ—Ç—ã</div>
                <div className="font-bold text-white">{coins}</div>
              </div>
            </div>
          </div>
          
          {/* –ü–∞–∫–µ—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏ */}
          <div className="grid grid-cols-3 gap-2">
            {ENERGY_PACKAGES.map((pack) => (
              <div key={pack.id} className="border border-gray-700 rounded-lg p-2 hover:shadow-md transition-shadow bg-gray-800 bg-opacity-90">
                <div className="flex items-center justify-center mb-1">
                  <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center text-yellow-400 text-xl">
                    ‚ö°
                  </div>
                </div>
                <h3 className="text-sm font-medium text-center text-white">{pack.name}</h3>
                <div className="text-yellow-400 font-bold text-center my-1">+{pack.energy_amount}</div>
                <div className="text-center text-yellow-500 font-bold mb-2 flex items-center justify-center">
                  {pack.price} <span className="ml-1">ü™ô</span>
                </div>
                <button
                  onClick={() => buyEnergy(pack)}
                  disabled={buying || coins < pack.price || energy >= maxEnergy}
                  className={`w-full py-1 px-2 rounded-md text-center text-sm transition ${
                    buying || coins < pack.price || energy >= maxEnergy
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-yellow-500 hover:bg-yellow-600 text-gray-900'
                  }`}
                >
                  {buying ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å'}
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* –ë–ª–æ–∫ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é */}
      <div className="bg-gray-900 bg-opacity-80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden border border-gray-700 w-full">
        <div className="bg-gray-800 bg-opacity-90 p-2 border-b border-yellow-500">
          <h2 className="text-lg font-bold text-yellow-400 text-center">–û–±–º–µ–Ω —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –º–æ–Ω–µ—Ç—ã</h2>
        </div>
        
        <div className="p-3">
          {/* –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã */}
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-300 mb-1">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞</label>
            <select 
              value={selectedCurrency?.id || ''}
              onChange={(e) => {
                const currency = LOCATION_CURRENCIES.find(c => c.id === e.target.value);
                setSelectedCurrency(currency || null);
              }}
              className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white focus:ring-yellow-500 focus:border-yellow-500"
            >
              {LOCATION_CURRENCIES.map(currency => (
                <option key={currency.id} value={currency.id}>
                  {currency.icon} {currency.name} - –ë–∞–ª–∞–Ω—Å: {currencyBalances[currency.id] || 0}
                </option>
              ))}
            </select>
          </div>
          
          {/* –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ */}
          {selectedCurrency && (
            <div className="mb-3 bg-gray-800 p-2 rounded-md border border-gray-700">
              <div className="text-sm text-gray-300">–ö—É—Ä—Å –æ–±–º–µ–Ω–∞:</div>
              <div className="flex items-center justify-center">
                <span className="text-white font-bold">1 {selectedCurrency.icon}</span>
                <span className="text-gray-400 mx-2">‚Üí</span>
                <span className="text-yellow-400 font-bold">{selectedCurrency.exchangeRate} ü™ô</span>
              </div>
            </div>
          )}
          
          {/* –í–≤–æ–¥ —Å—É–º–º—ã –¥–ª—è –æ–±–º–µ–Ω–∞ */}
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-300 mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–±–º–µ–Ω–∞</label>
            <input
              type="number"
              value={exchangeAmount}
              onChange={(e) => setExchangeAmount(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
              min="1"
              className="w-full bg-gray-800 border border-gray-700 rounded-md p-2 text-white focus:ring-yellow-500 focus:border-yellow-500"
            />
          </div>
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–º–µ–Ω–∞ */}
          <div className="mb-3 bg-gray-800 p-2 rounded-md border border-gray-700">
            <div className="text-sm text-gray-300">–í—ã –ø–æ–ª—É—á–∏—Ç–µ:</div>
            <div className="flex items-center justify-center">
              <span className="text-yellow-400 font-bold text-xl">{calculateExchangeResult()} ü™ô</span>
            </div>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–º–µ–Ω–∞ */}
          <button
            onClick={exchangeCurrency}
            disabled={exchanging || !selectedCurrency || !exchangeAmount || isNaN(parseInt(exchangeAmount)) || parseInt(exchangeAmount) <= 0 || (currencyBalances[selectedCurrency?.id || ''] || 0) < parseInt(exchangeAmount)}
            className={`w-full py-2 px-4 rounded-md text-center font-medium transition ${
              exchanging || !selectedCurrency || !exchangeAmount || isNaN(parseInt(exchangeAmount)) || parseInt(exchangeAmount) <= 0 || (currencyBalances[selectedCurrency?.id || ''] || 0) < parseInt(exchangeAmount)
                ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                : 'bg-yellow-500 hover:bg-yellow-600 text-gray-900'
            }`}
          >
            {exchanging ? '–û–±–º–µ–Ω...' : '–û–±–º–µ–Ω—è—Ç—å'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ExchangeScreen; 