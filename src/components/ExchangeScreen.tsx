import React, { useState, useEffect } from 'react';
import * as api from '../lib/api';
import { AppEvent, emit } from '../lib/events';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤ —ç–Ω–µ—Ä–≥–∏–∏
interface EnergyPackage {
  id: number;
  name: string;
  energy_amount: number;
  price: number;
}

// –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏
const ENERGY_PACKAGES: EnergyPackage[] = [
  { id: 1, name: '–ú–∞–ª–µ–Ω—å–∫–∏–π –ø–∞–∫–µ—Ç', energy_amount: 10, price: 50 },
  { id: 2, name: '–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç', energy_amount: 25, price: 100 },
  { id: 3, name: '–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç', energy_amount: 50, price: 180 }
];

const ExchangeScreen: React.FC = () => {
  const [coins, setCoins] = useState<number>(0);
  const [energy, setEnergy] = useState<number>(0);
  const [maxEnergy, setMaxEnergy] = useState<number>(100);
  const [buying, setBuying] = useState<boolean>(false);
  const [message, setMessage] = useState<{text: string, type: 'success' | 'error'} | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadPlayerData();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
  const loadPlayerData = async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
      const userCoins = await api.getResourceAmount('main');
      console.log('–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:', userCoins);
      setCoins(userCoins);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
      const progress = await api.getPlayerProgress();
      console.log('–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–≥—Ä–æ–∫–∞:', progress);
      setEnergy(progress.energy);
      setMaxEnergy(progress.maxEnergy);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
      showMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
  const buyEnergy = async (pack: EnergyPackage) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if (coins < pack.price) {
      showMessage('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏', 'error');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —ç–Ω–µ—Ä–≥–∏—è –º–∞–∫—Å–∏–º—É–º
    if (energy >= maxEnergy) {
      showMessage('–£ –≤–∞—Å —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–Ω–µ—Ä–≥–∏–∏', 'error');
      return;
    }
    
    setBuying(true);
    try {
      console.log(`–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞ —ç–Ω–µ—Ä–≥–∏–∏: ${pack.name}, —Ü–µ–Ω–∞: ${pack.price}, —ç–Ω–µ—Ä–≥–∏—è: +${pack.energy_amount}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–µ—Ç –∏ —ç–Ω–µ—Ä–≥–∏–∏
      const newCoins = coins - pack.price;
      const newEnergy = Math.min(energy + pack.energy_amount, maxEnergy);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCoins(newCoins);
      setEnergy(newEnergy);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è App.tsx
      emit(AppEvent.RESOURCES_UPDATED, {
        currencyId: 'main',
        amount: newCoins
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è App.tsx
      emit(AppEvent.ENERGY_UPDATED, {
        energy: newEnergy,
        maxEnergy: maxEnergy
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      showMessage(`+${pack.energy_amount} —ç–Ω–µ—Ä–≥–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!`, 'success');
      console.log(`–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: –º–æ–Ω–µ—Ç—ã=${newCoins}, —ç–Ω–µ—Ä–≥–∏—è=${newEnergy}/${maxEnergy}`);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç–Ω–µ—Ä–≥–∏–∏:', error);
      showMessage(`–û—à–∏–±–∫–∞: ${error.message || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'}`, 'error');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      await loadPlayerData();
    } finally {
      setBuying(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const showMessage = (text: string, type: 'success' | 'error') => {
    setMessage({ text, type });
    setTimeout(() => setMessage(null), 3000);
  };

  return (
    <div className="w-full max-w-md">
      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message && (
        <div className={`p-2 rounded-lg mb-2 text-center absolute top-28 left-1/2 transform -translate-x-1/2 z-20 ${
          message.type === 'success' 
            ? 'bg-green-100 text-green-800 border border-green-300' 
            : 'bg-red-100 text-red-800 border border-red-300'
        }`}>
          {message.text}
        </div>
      )}
      
      {/* –ë–ª–æ–∫ –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏ */}
      <div className="bg-gray-900 bg-opacity-80 backdrop-blur-sm rounded-xl shadow-lg overflow-hidden border border-gray-700">
        <div className="bg-gray-800 bg-opacity-90 p-2 border-b border-yellow-500">
          <h2 className="text-lg font-bold text-yellow-400 text-center">–ü–æ–ø–æ–ª–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é</h2>
        </div>
        
        <div className="p-3">
          {/* –°—Ç–∞—Ç—É—Å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –º–æ–Ω–µ—Ç */}
          <div className="flex justify-between mb-3">
            <div className="flex items-center bg-gray-800 p-1.5 rounded-md border border-gray-700">
              <div className="w-6 h-6 flex items-center justify-center bg-yellow-500 text-white rounded-full mr-1">
                ‚ö°
              </div>
              <div>
                <div className="text-xs text-gray-400">–≠–Ω–µ—Ä–≥–∏—è</div>
                <div className="font-bold text-white">{energy} / {maxEnergy}</div>
              </div>
            </div>
            
            <div className="flex items-center bg-gray-800 p-1.5 rounded-md border border-gray-700">
              <div className="w-6 h-6 flex items-center justify-center bg-yellow-500 text-white rounded-full mr-1">
                ü™ô
              </div>
              <div>
                <div className="text-xs text-gray-400">–ú–æ–Ω–µ—Ç—ã</div>
                <div className="font-bold text-white">{coins}</div>
              </div>
            </div>
          </div>
          
          {/* –ü–∞–∫–µ—Ç—ã —ç–Ω–µ—Ä–≥–∏–∏ */}
          <div className="grid grid-cols-3 gap-2">
            {ENERGY_PACKAGES.map((pack) => (
              <div key={pack.id} className="border border-gray-700 rounded-lg p-2 hover:shadow-md transition-shadow bg-gray-800 bg-opacity-90">
                <div className="flex items-center justify-center mb-1">
                  <div className="w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center text-yellow-400 text-xl">
                    ‚ö°
                  </div>
                </div>
                <h3 className="text-sm font-medium text-center text-white">{pack.name}</h3>
                <div className="text-yellow-400 font-bold text-center my-1">+{pack.energy_amount}</div>
                <div className="text-center text-yellow-500 font-bold mb-2 flex items-center justify-center">
                  {pack.price} <span className="ml-1">ü™ô</span>
                </div>
                <button
                  onClick={() => buyEnergy(pack)}
                  disabled={buying || coins < pack.price || energy >= maxEnergy}
                  className={`w-full py-1 px-2 rounded-md text-center text-sm transition ${
                    buying || coins < pack.price || energy >= maxEnergy
                      ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                      : 'bg-yellow-500 hover:bg-yellow-600 text-gray-900'
                  }`}
                >
                  {buying ? '–ü–æ–∫—É–ø–∫–∞...' : '–ö—É–ø–∏—Ç—å'}
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExchangeScreen; 