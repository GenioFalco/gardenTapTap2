import React, { useEffect, useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Location, Tool, CurrencyType, Currency } from '../types';
import * as api from '../lib/api';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const UpgradeModal = ({ 
  show, 
  onClose, 
  tools, 
  equippedToolId, 
  playerLevel,
  onBuyTool,
  onActivateTool,
  locationCurrency,
  locationName,
  locationCurrencyType,
  unlockedTools = [] // –ú–∞—Å—Å–∏–≤ ID —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
}: { 
  show: boolean; 
  onClose: () => void; 
  tools: Tool[];
  equippedToolId: number;
  playerLevel: number;
  onBuyTool: (toolId: number) => Promise<boolean>;
  onActivateTool: (toolId: number) => Promise<boolean | void>;
  locationCurrency: number;
  locationName: string;
  locationCurrencyType: CurrencyType;
  unlockedTools?: number[]; // –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
}) => {
  const [activeTab, setActiveTab] = useState<'tools' | 'helpers'>('tools');
  const [helperActive, setHelperActive] = useState<boolean>(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  // –ü–æ–º–æ—â–Ω–∏–∫ - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const helper = {
    name: `–ü–æ–º–æ—â–Ω–∏–∫ ${locationName}`,
    unlockLevel: 5,
    cost: 500,
    income: 180,
    currency: locationCurrencyType,
    unlocked: playerLevel >= 5,
    purchased: false
  };

  if (!show) return null;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤
  const handleBuyTool = async (tool: Tool) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if (tool.unlockCost > locationCurrency) {
      setErrorMessage(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ ${tool.unlockCost} ${locationCurrencyType.toLowerCase()}`);
      setTimeout(() => setErrorMessage(null), 3000);
      return;
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    const success = await onBuyTool(tool.id);
    if (!success) {
      setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç');
      setTimeout(() => setErrorMessage(null), 3000);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4">
      <div className="bg-gray-800 rounded-lg w-full max-w-md relative">
        {/* –ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button 
          onClick={onClose} 
          className="absolute top-2 right-2 text-white text-xl w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-700"
        >
          ‚úï
        </button>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="p-4 border-b border-gray-700">
          <h2 className="text-xl font-bold text-white">–£–ª—É—á—à–µ–Ω–∏—è</h2>
        </div>
        
        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
        {errorMessage && (
          <div className="bg-red-500 text-white p-2 text-center">
            {errorMessage}
          </div>
        )}
        
        {/* –¢–∞–±—ã */}
        <div className="flex border-b border-gray-700">
          <button 
            className={`flex-1 py-2 text-center ${activeTab === 'tools' ? 'text-yellow-400 border-b-2 border-yellow-400' : 'text-gray-400'}`}
            onClick={() => setActiveTab('tools')}
          >
            –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
          </button>
          <button 
            className={`flex-1 py-2 text-center ${activeTab === 'helpers' ? 'text-yellow-400 border-b-2 border-yellow-400' : 'text-gray-400'}`}
            onClick={() => setActiveTab('helpers')}
          >
            –ü–æ–º–æ—â–Ω–∏–∫–∏
          </button>
        </div>
        
        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–æ–≤ */}
        <div className="p-4 max-h-96 overflow-y-auto">
          {activeTab === 'tools' ? (
            <div>
              <h3 className="text-white font-medium mb-4">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
              
              {tools.map(tool => {
                const isEquipped = tool.id === equippedToolId;
                const isUnlockable = playerLevel >= tool.unlockLevel;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º:
                // 1. –ï—Å–ª–∏ –æ–Ω —É–∂–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω
                // 2. –ï—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ unlockedTools
                // 3. –ï—Å–ª–∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å 0
                const isOwned = isEquipped || 
                               unlockedTools.includes(tool.id) || 
                               tool.unlockCost === 0;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                const notEnoughResources = tool.unlockCost > locationCurrency;
                
                return (
                  <div 
                    key={tool.id} 
                    className={`mb-4 p-3 rounded-lg ${isEquipped ? 'bg-gray-700' : 'bg-gray-900'}`}
                  >
                    <div className="flex items-center">
                      <img 
                        src={tool.imagePath || '/assets/tools/axe.png'} 
                        alt={tool.name} 
                        className="w-12 h-12 mr-3"
                      />
                      <div className="flex-1">
                        <div className="flex justify-between">
                          <h4 className="text-white font-medium">{tool.name}</h4>
                          {isEquipped && (
                            <span className="text-xs bg-yellow-500 text-black px-2 py-1 rounded">
                              –ê–∫—Ç–∏–≤–µ–Ω
                            </span>
                          )}
                        </div>
                        <div className="text-sm text-gray-400">
                          <div>+{tool.locationCoinsPower || tool.location_coins_power || 1} –≤–∞–ª—é—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ –∑–∞ —Ç–∞–ø</div>
                          <div>+{tool.mainCoinsPower || tool.main_coins_power || 0.5} —Å–∞–¥-–∫–æ–∏–Ω–æ–≤ –∑–∞ —Ç–∞–ø</div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-3">
                      {!isUnlockable ? (
                        <div className="text-sm text-gray-400 text-center border border-gray-700 py-2 rounded">
                          –î–æ—Å—Ç—É–ø–µ–Ω —Å {tool.unlockLevel} —É—Ä–æ–≤–Ω—è
                        </div>
                      ) : isOwned ? (
                        !isEquipped && (
                          <button 
                            className="w-full bg-green-600 hover:bg-green-700 text-white py-1 px-4 rounded"
                            onClick={() => onActivateTool(tool.id)}
                          >
                            –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                          </button>
                        )
                      ) : (
                        <div>
                          <div className="flex justify-between items-center mb-1 text-xs">
                            <span>{locationCurrency} / {tool.unlockCost} {tool.currencyType.toLowerCase()}</span>
                            {notEnoughResources && 
                              <span className="text-red-400">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤</span>
                            }
                          </div>
                          <button 
                            className={`w-full py-1 px-4 rounded ${
                              notEnoughResources 
                                ? 'bg-gray-500 text-gray-300 cursor-not-allowed' 
                                : 'bg-yellow-500 hover:bg-yellow-600 text-black'
                            }`}
                            onClick={() => handleBuyTool(tool)}
                          >
                            –ö—É–ø–∏—Ç—å –∑–∞ {tool.unlockCost} {tool.currencyType.toLowerCase()}
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div>
              <h3 className="text-white font-medium mb-4">–ü–æ–º–æ—â–Ω–∏–∫–∏</h3>
              
              <div className="mb-4 p-3 rounded-lg bg-gray-900">
                <div className="flex items-center">
                  <div className="w-12 h-12 mr-3 bg-gray-700 rounded-full flex items-center justify-center text-xl">
                    üë∑
                  </div>
                  <div className="flex-1">
                    <h4 className="text-white font-medium">{helper.name}</h4>
                    <div className="text-sm text-gray-400">
                      +{helper.income} {helper.currency} –≤ —á–∞—Å
                    </div>
                  </div>
                </div>
                
                <div className="mt-3">
                  {!helper.unlocked ? (
                    <div className="text-sm text-gray-400 text-center border border-gray-700 py-2 rounded">
                      –î–æ—Å—Ç—É–ø–µ–Ω —Å {helper.unlockLevel} —É—Ä–æ–≤–Ω—è
                    </div>
                  ) : !helper.purchased ? (
                    <button 
                      className="w-full bg-yellow-500 hover:bg-yellow-600 text-black py-1 px-4 rounded"
                      onClick={() => alert('–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!')}
                    >
                      –ù–∞–Ω—è—Ç—å –∑–∞ {helper.cost} {helper.currency}
                    </button>
                  ) : (
                    <label className="flex items-center justify-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        checked={helperActive}
                        onChange={() => setHelperActive(!helperActive)}
                        className="mr-2" 
                      />
                      <span className="text-white">{helperActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</span>
                    </label>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

interface GameScreenProps {
  location: Location;
  tools: Tool[];
  equippedToolId: number;
  resourceAmount: number;
  currencyType: CurrencyType;
  energy: number;
  maxEnergy: number;
  level: number;
  experience: number;
  nextLevelExperience: number;
  onTap: () => Promise<void>;
  onUpgrade: (toolId: number) => Promise<boolean>;
  onActivateTool: (toolId: number) => Promise<boolean | void>;
  characterImageUrl?: string;
  gardenCoins?: number;
  unlockedTools?: number[]; // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
}

const GameScreen: React.FC<GameScreenProps> = ({
  location,
  tools,
  equippedToolId,
  resourceAmount,
  currencyType,
  energy,
  maxEnergy,
  level,
  experience,
  nextLevelExperience,
  onTap,
  onUpgrade,
  onActivateTool,
  characterImageUrl = '/assets/characters/lumberjack.png',
  gardenCoins = 0,
  unlockedTools = [], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
}) => {
  const [isAnimating, setIsAnimating] = useState(false);
  const [showNotEnoughResources, setShowNotEnoughResources] = useState(false);
  const [showNoEnergy, setShowNoEnergy] = useState(false);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [currencyInfo, setCurrencyInfo] = useState<Currency | null>(null);
  const [characterAppearance, setCharacterAppearance] = useState<{
    imagePath: string;
    animationPath: string | null;
    animationType: string | null;
    frameCount: number | null;
  }>({
    imagePath: characterImageUrl,
    animationPath: null,
    animationType: null,
    frameCount: null
  });

  // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  const currentTool = tools.find(tool => tool.id === equippedToolId);
  const nextToolIndex = tools.findIndex(tool => tool.id === equippedToolId) + 1;
  const nextTool = nextToolIndex < tools.length ? tools[nextToolIndex] : null;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ –ª–æ–∫–∞—Ü–∏–∏
  useEffect(() => {
    const loadCurrencyInfo = async () => {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º currencyType, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ currencyId
        const currencyIdentifier = location.currencyType || location.currencyId;
        if (currencyIdentifier) {
          const currency = await api.getCurrencyByType(currencyIdentifier);
          if (currency) {
            setCurrencyInfo(currency);
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ:', error);
      }
    };

    loadCurrencyInfo();
  }, [location.currencyType, location.currencyId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ª–æ–∫–∞—Ü–∏–∏
  useEffect(() => {
    const loadCharacterAppearance = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ characterId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ camelCase –∏ snake_case)
      const characterId = location.characterId || (location as any).character_id;
      
      if (!characterId) {
        console.warn('characterId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏:', location);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        setCharacterAppearance({
          imagePath: characterImageUrl,
          animationPath: null,
          animationType: null,
          frameCount: null
        });
        return;
      }
      
      if (!equippedToolId) {
        console.warn('equippedToolId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏:', location);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        setCharacterAppearance({
          imagePath: characterImageUrl,
          animationPath: null,
          animationType: null,
          frameCount: null
        });
        return;
      }
      
      try {
        console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: characterId=${characterId}, toolId=${equippedToolId}`);
        const appearance = await api.getCharacterAppearance(characterId, equippedToolId);
        
        if (appearance) {
          console.log('–ü–æ–ª—É—á–µ–Ω –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', appearance);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π
          const imagePath = appearance.imagePath || characterImageUrl;
          const animationPath = appearance.animationPath || null;
          const animationType = appearance.animationType || null;
          // frameCount –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
          const frameCount = appearance.frameCount !== undefined ? appearance.frameCount : null;
          
          setCharacterAppearance({
            imagePath,
            animationPath,
            animationType,
            frameCount
          });
        } else {
          console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ character/tool');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          setCharacterAppearance({
            imagePath: characterImageUrl,
            animationPath: null,
            animationType: null,
            frameCount: null
          });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setCharacterAppearance({
          imagePath: characterImageUrl,
          animationPath: null,
          animationType: null,
          frameCount: null
        });
      }
    };
    
    loadCharacterAppearance();
  }, [location, equippedToolId, characterImageUrl]);

  // –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
  const handleUpgrade = useCallback(async () => {
    if (!nextTool) return;
    
    const success = await onUpgrade(nextTool.id);
    if (!success) {
      setShowNotEnoughResources(true);
      setTimeout(() => setShowNotEnoughResources(false), 1500);
    }
  }, [nextTool, onUpgrade]);

  // –¢–∞–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
  const handleTap = useCallback(async () => {
    if (energy <= 0) {
      setShowNoEnergy(true);
      setTimeout(() => setShowNoEnergy(false), 1500);
      return;
    }
    
    if (isAnimating) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    
    setIsAnimating(true);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏—è, –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é
    const hasAnimation = characterAppearance.animationPath !== null && characterAppearance.animationType !== null;
    
    if (hasAnimation) {
      const staticImage = characterAppearance.imagePath;
      const animationDuration = characterAppearance.animationType === 'gif' ? 1000 : 500; // GIF –¥–æ–ª—å—à–µ, —Å–ø—Ä–∞–π—Ç—ã –±—ã—Å—Ç—Ä–µ–µ
      
      setCharacterAppearance(prev => ({
        ...prev,
        imagePath: characterAppearance.animationPath || staticImage
      }));
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        setCharacterAppearance(prev => ({
          ...prev,
          imagePath: staticImage
        }));
      }, animationDuration);
    }
    
    await onTap();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setIsAnimating(false);
    }, 200);
  }, [energy, onTap, isAnimating, characterAppearance]);

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.code === 'Space') handleTap();
      if (e.code === 'KeyU') setShowUpgradeModal(true);
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [handleTap]);

  return (
    <div 
      className="h-screen w-full flex flex-col items-center justify-between py-8 px-4 pt-24"
      style={{
        backgroundImage: `url(${location.background})`,
        backgroundSize: 'cover',
        backgroundPosition: 'center',
      }}
    >
      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º */}
      <div className="flex-1 flex items-center justify-center relative">
        {/* –ü–µ—Ä—Å–æ–Ω–∞–∂ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ canvas */}
        <motion.div 
          className={`cursor-pointer relative ${isAnimating ? 'animate-bounce-small' : ''}`}
          animate={isAnimating ? { scale: 0.95 } : { scale: 1 }}
          transition={{ duration: 0.2 }}
          onClick={handleTap}
        >
          {characterAppearance.imagePath && (
            <img 
              src={characterAppearance.imagePath} 
              alt="–ü–µ—Ä—Å–æ–Ω–∞–∂"
              className="w-56 h-56 md:w-64 md:h-64"
              style={{ 
                pointerEvents: energy <= 0 ? 'none' : 'auto',
                objectFit: 'contain'
              }}
            />
          )}
          {!characterAppearance.imagePath && (
            <div 
              className="w-56 h-56 md:w-64 md:h-64 bg-gray-700 flex items-center justify-center"
              style={{ pointerEvents: energy <= 0 ? 'none' : 'auto' }}
            >
              <span className="text-white text-xl">–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</span>
            </div>
          )}
        </motion.div>

        {/* –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        {showNotEnoughResources && (
          <motion.div
            className="absolute top-12 left-1/2 transform -translate-x-1/2 bg-red-600 px-4 py-2 rounded-lg text-white text-sm"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
          >
            –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤
          </motion.div>
        )}

        {showNoEnergy && (
          <motion.div
            className="absolute top-12 left-1/2 transform -translate-x-1/2 bg-amber-600 px-4 py-2 rounded-lg text-white text-sm"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0 }}
          >
            –ù–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏
          </motion.div>
        )}
      </div>

      {/* –ù–∏–∂–Ω—è—è –æ–±–ª–∞—Å—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ - –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–Ω—è—Ç–∞ –≤–≤–µ—Ä—Ö */}
      <div className="w-full max-w-xs fixed bottom-24 left-1/2 transform -translate-x-1/2 z-10">
        <div className="bg-gray-800 bg-opacity-80 rounded-lg p-1.5">
          <div className="flex justify-between items-center mb-2">
            <div>
              <div className="text-xs text-white opacity-70">–¢–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</div>
              <div className="font-medium text-sm text-white">{currentTool?.name || '–ù–µ—Ç'}</div>
            </div>
            <div className="font-medium text-right">
              <div className="text-xs text-white opacity-70">–°–∏–ª–∞ —Ç–∞–ø–∞</div>
              <div className="flex flex-col">
                <span className="text-white text-sm">{currencyInfo?.name || currencyType}: {currentTool?.locationCoinsPower || currentTool?.location_coins_power || 1}</span>
                <span className="text-yellow-400 text-sm">–°–∞–¥-–∫–æ–∏–Ω—ã: {currentTool?.mainCoinsPower || currentTool?.main_coins_power || 0.5}</span>
              </div>
            </div>
          </div>

          <button 
            className="w-full bg-yellow-500 hover:bg-yellow-600 py-1 px-2 rounded text-black text-xs mt-0.5"
            onClick={() => setShowUpgradeModal(true)}
          >
            –£–ª—É—á—à–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ª—É—á—à–µ–Ω–∏—è */}
      <UpgradeModal 
        show={showUpgradeModal} 
        onClose={() => setShowUpgradeModal(false)} 
        tools={tools}
        equippedToolId={equippedToolId}
        playerLevel={level}
        onBuyTool={onUpgrade}
        onActivateTool={async (toolId) => {
          const result = await onActivateTool(toolId);
          setShowUpgradeModal(false);
          return result;
        }}
        locationCurrency={resourceAmount}
        locationName={location.name}
        locationCurrencyType={currencyType}
        unlockedTools={unlockedTools}
      />
    </div>
  );
};

export default GameScreen; 